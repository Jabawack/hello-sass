$font-stack:    Helvetica, sans-serif;
$primary-color: #333;

body {
    // single line gets ommited
    font: 100% $font-stack;
    /* multi-line comments stay */
    color: $primary-color;
}

/* Datatypes */
// null
$i-am-null: null;

//booleans
$i-am-true: true;
$i-am-false: false;

//number
$a-number: 7;

//strings
$name: 'Taeho Kimn';
$name-together: 'Taeho' + ' Kim';

// color
$color: lighten(white, 15%); // #b8dc70
$venus: #998099;

/* Arithmetic oprators */
h1 {
    font-size: 4px +2 ;
}

h2 {
    font-size: 4px - 2;
}

h3 {
    font-size: (10/2);
    opacity: random(4) /5;
    padding-right: 2px / 4px + 3px;
}

h4 {
    width: 3px * 5 + 5px;
    width: 3 * (5px + 5px);
    width: 3px + (6px / 2) * 3;
}




/* Equality oprators == */
@mixin font-fl($font) {
    &:after {
        @if (type-of($font) == string) {
            content: 'My font is: #{$font}.';
        } @else {
            content: 'Sorry, the argument #{$font} is a #{type-of($font)}.';
        }
    }
}

h2 {
    @include font-fl(sans-serif);
}

/* Comparison oprators */
$padding: 50px;

h2 {
    @if ($padding <= 20px) {
        padding: $padding;
    } @else {
        padding: $padding /2;
    }
}

/* Logical oprators */
$var1: "foo";
$var2: "bazxsd";

@mixin font-fl() {
    &:after {
        //@if $var1 == "foo" and $var2 == "bar" {
            //content: 'var1 and var2 are true';
        @if $var1 == "foo" or $var2 == "bar" {
            content: 'var1 or var2 is true';
        } @else {
            content: 'var1 or var2 is false';
        }
    }
}

h2 {
    @include font-fl();
}

/* String oprators */
$first-name: 'Taeho';
$last-name: 'Kim';

@mixin string-concat-name {
    &:after {
        content: "Your name is: " + $first-name + " " + $last-name;
    }
}

h2 {
    @include string-concat-name;
}

/* Color oprations */
h1 {
    // Alpha channels must be equal
    color: rgba(70, 132, 153, 1) + rgba(32, 68, 121, 1);
}

h2 {
    color: #DC143C + #B0171F;
}

/* &(Ampersand) */
.button {
    &:visited { color: white; }
    &:hover { color: white; }
    &:active { color: white; }
}

.button {
    & > span { color: white; }
    & + span { color: white; }
    & ~ span { color: white; }
}


.btn {
    &-primary { color: white; }
    &-secondary { color: white; }
}

.button {
    body.page-about & { color: white; }
}

/* interpolation #($font) */
@mixin font-fl($font) {
    &:after {
        @if (type-of($font) == string) {
            content: 'My font is: #{$font}.';
        } @else {
            content: 'Sorry, the argument #{$font} is a #{type-of($font)}.';
        }
    }
}

h2 {
    @include font-fl(sans-serif);
}

/* Partials & imports */
/* partials - a little snippet of CSS */
/* import - use import */
@import 'partials/_reset';

#main {
    @import "partials/_buttons";
}

/* Mixins & Inheritance(@extend) */
/* Mixins */
$font-base: 16px;

@mixin sample {
    font-size: $font-base;
}


@mixin large-text {
    font: {
        family: Arial;
        size: 20px;
        weight: bold;
    }
    
    color: #ff0000;
}

p {
    @include sample;
}

h1 {
    @include large-text;
}

@mixin silly-links {
    a {
        color: blue;
        background-color: red;
    }
}

@include silly-links;

@mixin compound {
    @include highlighted-background;
    @include header-text;
}

@mixin highlighted-background { background-color: #fc0; }
@mixin header-text { font-size: 20px; }

h4 {
    @include compound;
}


/* Mixins with Arguments */
@mixin linx ($link, $visit, $hover, $active) {
    a {
        color: $link;
        &:visited { color: $visit; }
        &:hover { color: $hover; }
        &:active { color: $active; }
    }
}

#main {
    @include linx(white, blue, green, red);
}

$font-base: 12px;

@mixin sexy-border($color, $width: 1in) {
    border: {
        color: $color;
        width: $width;
        style: dashed;
    }
}

p { @include sexy-border(blue); }
h1 { @include sexy-border(blue, 2in); }

p { @include sexy-border($color: blue); }
h1 { @include sexy-border($color  : blue, $width: 2in); }

@mixin box-shadow($shadows...) {
    -moz-box-shadow: $shadows;
    -webkit-box-shadow: $shadows;
    box-shadow: $shadows;
}

.shadows {
    @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
}

/* Inheritance with @extend */
.message {
    border: 1px solid #ccc;
    padding: 10px;
    color: #333;
}

.success {
    @extend .message;
    border-color: green;
}

.error {
    @extend .message;
    border-color: red;
}

.warning {
    @extend .message;
    border-color: yellow;
}

// Multiple Extends
.error {
    border: 1px #f00;
    background-color: #fdd;
}

.attention {
    font-size: 3em;
    background-color: #ff0;
}

.seriousError {
    @extend .error;
    @extend .attention;
    border-width: 3px;
}

// Chaining Extends
.error {
    border: 1px #f00;
    background-color: #fdd;
}

.seriousError {
    @extend .error;
    border-width: 3px;
}

.scriticalError {
    @extend .seriousError;
    position: fixed;
    top: 10%;
    bottom: 10%;
    left: 10%;
    right: 10%;
}

/* Placeholder Selectors */
%foo {
    color: red;
}

.bar {
    @extend %foo;
    background: blue;
}

.baz {
    @extend %foo;
    background: yellow;
}

/* Extend vs Mixin */
// mixin will make multiple
@mixin hide-text {
    text-indent: -9999px;
    overflow: hidden;
}

.foo {
    @include hide-text;
}

.bar {
    @include hide-text;
}

.baz {
    @include hide-text;
}

// placeholder will collapse to one
%hide-text {
    text-indent: -9999px;
    overflow: hidden;
}

.foo {
    @extend %hide-text;
}

.bar {
    @extend %hide-text;
}

.baz {
    @extend %hide-text;
}

// try to use mixin with arguments
@mixin border-radius($radius) {
    border-radius: $radius;
}

.foo {
    @include border-radius(5px);
}

.bar {
    @include border-radius(7px);
}

.baz {
    @include border-radius(9px);
}

/* Nesting Rules */
#main p {
    color: #00ff00;
    width: 97%;
    
    .redbox {
        background-color: #ff0000;
        color: #000000;
    }
}

#main {
    width: 97%;
    
    p, div {
        font-size: 2em;
        a { font-weight: bold; }
    }
    
    pre { font-size: 3em; }
}


a {
    font-weight: bold;
    text-decoration: none;
    &:hover { text-decoration: underline; }
    body.firefox & { font-weight: normal; }
}

#main {
    color: black;
    
    a {
        font-weight: bold;
        &:hover { color: red; }
    }
}

#main {
    color: black;
    &-sidebar { border: 1px solid; }
}

/* Nesting Properties */
.funky {
    font: {
        family: fantasy;
        size: 30em;
        weight: bold;
    }
}

.funky {
    font: 20px/24px fantasy {
        weight: bold;
    }
}

/* Lists */
$background-colors-list: #4BC2A5 #606F40 #6648C1 #6B6022 #2F54E9;
$border-colors-list: #ff9900 #77ff66 #73C227 #C23E50 #7BAFC2;
$colors-list: #111 #222 #333 #444 #555;

// Nth Function Within Lists
@each $current-color in $colors-list {
    $i: index($colors-list, $current-color);
    .stuff-#{$i} {
        color: $current-color;
        background-color: nth($background-colors-list, $i);
        border: nth($border-colors-list, $i);
    }
}


$font-list: 'Raleway', 'Dosis', 'Lato';
// Three comma seperated elements

$pad-list: 10px 8px 12px;
// Three space seperated elements

$multi-list: 'Roboto', 15px 1.3em;
// This multi-list has two lists.


/* Maps */
$primary-colors: (
    "red": "#ff0000",
    "green": "#00ff00",
    "blue": "#0000ff"
);

// wrong
@each $color in $primary-colors {
    .thing-#{$color} {
        content: "#{$color}";
    }
}

// good
@each $color-name, $color-code in $primary-colors {
    .color-#{$color-name} {
        //background: #{$color-code}; // this does not return quotation marks (e.g.: #ff0000 )
        background: $color-code; // "#ff0000"
    }
}

/* At-root */
.btn {
    background: #ededed;
    border: 1px solid #555;
    color: #555;
    padding: 1em 2em;
    
    font: {
        family: 'Open Sans Condensed', sans-serif;
        size: 1rem;
    }
    
    //a#{&} { //.btn a.btn
    @at-root a#{&} { //a.btn
        text-decoration: none;
    }
}

.parent {
    font-size: 1rem;
    padding: 1em 2em;
    //.likely-modified { // .parent .likely-modified
    @at-root .likely-modified { //.likely-modified
        font-size: 1.5em;
    }
}

/* Built-in Functions */
$main-color: #6dcff6;
$darker-color: darken($main-color, 20%);
$lighter-color: lighten($main-color, 20%);
$opaque-color: opacify($main-color, 0.5);
$transparent-color: transparentize($main-color, 0.3);

$list: b,c,d,e,f;
$new-list: prepend($list, a); // a,b,c,d,e,f

$list: a,b,c,d,z,e,a,f;
$first-index: index($list, a); // 1
$last-index: last-index($list, a); // 6
$last-index: last-index($list, z); // null

$list: a,b,c,d,e,f;
$new-list: slice($list, 3,5); // c,d,e

$list: a,b,c,d,e,f,g,h;
$new-list: to-string($list); // abcdefgh
$new-list: to-string($list, '-'); // a-b-c-d-e-f-g-h

.brand-button {
    background: $main-color;
}

.brand-button:hover {
    background: $lighter-color;
}

.brand-button:visited {
    background: $darker-color;
}

.modal.focus {
    background: $main-color;
}

.modal.blur {
    background: $transparent-color;
}

.modal.content {
    background: $opaque-color;
}

/* Create Own Functions */
@function my-calculation-function($some-number, $another-number) {
    @return $some-number + $another-number
};

@function calc-percent($target, $container) {
    @return ($target / $container) * 100%;
};
@function name-of-function($argument1, $argument2) {
    @return $argument1 + $argument2;
}

/* Using Your Own Functions */
.container {
    padding: my-calculation-function(100px, 200px);
}

.inner-container {
    width: calc-percent(250px, 555px);
}


/* Using @if, @else if, and @else */
p {
    @if 1+1 == 2 { border: 1px solid; }
    @if 5 < 3    { border: 2px dotted; }
}

@mixin test($condition) {
    $color: if($condition, blue, red);
    color: $color;
}

.firstClass {
    @include test(true);
}

.secondClass {
    @include test(false);
}

@mixin txt($weight) {
    color: white;
    @if $weight == bold { font-weight: bold; }
}

.txt1 {
    @include txt(none);
}

.txt1 {
    @include txt(bold);
}

/* @for Loops */
@for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
}

/* @each Loops */
@each $usr in bob, john, bill, mike {
    .#{$usr}-avatar {
        background-image: url('/img/#{$usr}.png');
    }
}

$alt: alert, yellow, red;
$sub: submit, white, green;
$bck: back, blue, transparent;

@each $type, $txt, $back in $alt, $sub, $bck {
    .#{$type}-button {
        color: $txt;
        background-color: $back;
    }
}

$ppl: (usr1:bob, usr2:john, usr3:bill, usr4:mike );

@each $key, $usr in $ppl {
    .#{$usr}-picture {
        background-image: url('/img/#{$usr}.png');
    }
}

/* @while Loops */
$x: 1;

@while $x < 13 {
    .col-#{$x} { width: 100/12 * $x; }
    $x: $x+1;
}






